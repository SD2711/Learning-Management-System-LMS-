import json
import logging
from abc import ABC, ABCMeta, abstractmethod
from datetime import date
from typing import List, Dict, Any, Optional


# ==========================
# 1. –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø
# ==========================
class InvalidDateError(Exception):
    pass


class PermissionDeniedError(Exception):
    pass


class CourseNotFoundError(Exception):
    pass


# ==========================
# 2. –î–ï–ö–û–†–ê–¢–û–†
# ==========================
def check_permissions(required_role: str):
    def decorator(func):
        def wrapper(self, *args, **kwargs):
            user_role = getattr(self, "user_role", "student")
            if user_role != required_role:
                raise PermissionDeniedError(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å '{required_role}'."
                )
            return func(self, *args, **kwargs)

        return wrapper

    return decorator


# ==========================
# 3. –ú–ò–ö–°–ò–ù–´
# ==========================
class LoggingMixin:
    def log_action(self, message: str):
        logging.info(f"[LOG] {message}")


class NotificationMixin:
    def notify_students(self, message: str):
        for student in self.students:
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {student}: {message}")


# ==========================
# 4. –ò–ù–¢–ï–†–§–ï–ô–°–´
# ==========================
class Teachable(ABC):
    @abstractmethod
    def teach(self) -> str:
        pass


class Assessable(ABC):
    @abstractmethod
    def assess_progress(self) -> str:
        pass


# ==========================
# 5. –ú–ï–¢–ê–ö–õ–ê–°–°
# ==========================


class CourseMeta(ABCMeta):
    """–ú–µ—Ç–∞–∫–ª–∞—Å—Å, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—â–∏–π –≤—Å–µ –ø–æ–¥–∫–ª–∞—Å—Å—ã Course."""

    registry = {}

    def __new__(mcs, name, bases, attrs):
        cls = super().__new__(mcs, name, bases, attrs)
        # –ù–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∞–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å Course
        if name != "Course":
            CourseMeta.registry[name.lower()] = cls
        return cls


# ==========================
# 6. –ê–ë–°–¢–†–ê–ö–¢–ù–´–ô –ö–õ–ê–°–° COURSE
# ==========================
class Course(ABC, LoggingMixin, NotificationMixin, metaclass=CourseMeta):
    def __init__(
        self,
        title: str,
        start_date: date,
        end_date: date,
        instructor: str,
        students: List[str],
        topics: List[str],
    ):
        if end_date < start_date:
            raise InvalidDateError(
                "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É—Ä—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞."
            )
        self._title = title
        self._start_date = start_date
        self._end_date = end_date
        self._instructor = instructor
        self._students = students
        self._topics = topics

    @property
    def title(self):
        return self._title

    @title.setter
    def title(self, val):
        self._title = val

    @property
    def students(self):
        return self._students

    @property
    def duration(self):
        return (self._end_date - self._start_date).days

    @abstractmethod
    def calculate_completion_rate(self) -> float:
        pass

    def __str__(self):
        return f"–ö—É—Ä—Å: {self._title}, –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {self._instructor}"

    def __eq__(self, other):
        return len(self.students) == len(other.students)

    def __lt__(self, other):
        return len(self.students) < len(other.students)

    def __gt__(self, other):
        return len(self.students) > len(other.students)

    def to_dict(self):
        return {
            "type": self.__class__.__name__,
            "title": self._title,
            "start_date": str(self._start_date),
            "end_date": str(self._end_date),
            "instructor": self._instructor,
            "students": self._students,
            "topics": self._topics,
        }


# ==========================
# 7. –ü–û–î–ö–õ–ê–°–°–´
# ==========================
class ProgrammingCourse(Course, Teachable, Assessable):
    def __init__(
        self, title, start_date, end_date, instructor, students, topics, languages
    ):
        super().__init__(title, start_date, end_date, instructor, students, topics)
        self.languages = languages

    def calculate_completion_rate(self):
        return len(self.topics) * 10

    def teach(self):
        return "–ü—Ä–æ–≤–æ–∂—É –ª–µ–∫—Ü–∏–∏ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º."

    def assess_progress(self):
        return "–û—Ü–µ–Ω–∏–≤–∞—é –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –∫–æ–¥—É."

    def __str__(self):
        return f"[–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ] {self.title} ({', '.join(self.languages)})"


class DesignCourse(Course, Teachable, Assessable):
    def __init__(
        self, title, start_date, end_date, instructor, students, topics, tools
    ):
        super().__init__(title, start_date, end_date, instructor, students, topics)
        self.tools = tools

    def calculate_completion_rate(self):
        return len(self.students) * 5

    def teach(self):
        return "–û–±—ä—è—Å–Ω—è—é –ø—Ä–∏–Ω—Ü–∏–ø—ã –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏."

    def assess_progress(self):
        return "–û—Ü–µ–Ω–∏–≤–∞—é –¥–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."

    def __str__(self):
        return f"[–î–∏–∑–∞–π–Ω] {self.title} ({', '.join(self.tools)})"


class ScienceCourse(Course, Teachable, Assessable):
    def __init__(
        self, title, start_date, end_date, instructor, students, topics, field
    ):
        super().__init__(title, start_date, end_date, instructor, students, topics)
        self.field = field

    def calculate_completion_rate(self):
        return (len(self.topics) + len(self.students)) * 3

    def teach(self):
        return "–ü—Ä–æ–≤–æ–∂—É –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã."

    def assess_progress(self):
        return "–û—Ü–µ–Ω–∏–≤–∞—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –æ—Ç—á—ë—Ç—ã."

    def __str__(self):
        return f"[–ù–∞—É–∫–∞] {self.title} ({self.field})"


# ==========================
# 8. –ü–õ–ê–¢–§–û–†–ú–ê –ò –ê–î–†–ï–°
# ==========================
class Address:
    def __init__(self, city, street, building):
        self.city, self.street, self.building = city, street, building

    def __str__(self):
        return f"{self.city}, {self.street}, {self.building}"


class Platform:
    def __init__(self, name, address):
        self.name, self.address = name, address
        self._courses = []

    def add_course(self, course):
        self._courses.append(course)

    def remove_course(self, title):
        self._courses = [c for c in self._courses if c.title != title]

    def get_courses(self):
        return self._courses

    def get_top_courses(self, n=3):
        return sorted(self._courses, key=lambda c: len(c.students), reverse=True)[:n]

    def save_to_file(self, filename="courses.json"):
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(
                [c.to_dict() for c in self._courses], f, ensure_ascii=False, indent=2
            )
        print(f"‚úÖ –ö—É—Ä—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")


# ==========================
# 9. –¶–ï–ü–û–ß–ö–ê –û–ë–Ø–ó–ê–ù–ù–û–°–¢–ï–ô
# ==========================
class Handler(ABC):
    def __init__(self, successor=None):
        self.successor = successor

    @abstractmethod
    def handle_request(self, request):
        pass


class InstructorHandler(Handler):
    def handle_request(self, request):
        if "–º–∞—Ç–µ—Ä–∏–∞–ª—ã" in request:
            return "üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."
        elif self.successor:
            return self.successor.handle_request(request)


class MethodologyDepartmentHandler(Handler):
    def handle_request(self, request):
        if "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞" in request:
            return "üìò –ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª —É—Ç–≤–µ—Ä–¥–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫—É—Ä—Å–∞."
        elif self.successor:
            return self.successor.handle_request(request)


class ManagementHandler(Handler):
    def handle_request(self, request):
        return "üèõ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –æ–¥–æ–±—Ä–∏–ª–æ –ª—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è."


# ==========================
# 10. –ú–ï–ù–Æ (CLI)
# ==========================
def main_menu():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(message)s",
        handlers=[logging.FileHandler("platform.log"), logging.StreamHandler()],
    )

    platform = Platform("EduPro", Address("–ú–æ—Å–∫–≤–∞", "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π –ø—Ä.", "10–ê"))

    while True:
        print("\n=== –ú–ï–ù–Æ –ü–õ–ê–¢–§–û–†–ú–´ ===")
        print("1. –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã")
        print("3. –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å")
        print("4. –¢–æ–ø-3 –∫—É—Ä—Å–∞ –ø–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º")
        print("5. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å—ã")
        print("6. –û–¥–æ–±—Ä–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Ü–µ–ø–æ—á–∫–∞)")
        print("7. –í—ã–π—Ç–∏")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç: ")

        if choice == "1":
            ctype = input("–¢–∏–ø –∫—É—Ä—Å–∞ (programming/design/science): ").lower()
            title = input("–ù–∞–∑–≤–∞–Ω–∏–µ: ")
            instructor = input("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ")
            students = input("–°—Ç—É–¥–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ").split(",")
            topics = input("–¢–µ–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ").split(",")
            start = date.fromisoformat(input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD): "))
            end = date.fromisoformat(input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD): "))

            extra = None
            if ctype == "programming":
                extra = input("–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: ").split(",")
            elif ctype == "design":
                extra = input("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ").split(",")
            elif ctype == "science":
                extra = input("–û–±–ª–∞—Å—Ç—å –Ω–∞—É–∫–∏: ")

            if ctype == "programming":
                course = ProgrammingCourse(
                    title, start, end, instructor, students, topics, extra
                )
            elif ctype == "design":
                course = DesignCourse(
                    title, start, end, instructor, students, topics, extra
                )
            else:
                course = ScienceCourse(
                    title, start, end, instructor, students, topics, extra
                )

            platform.add_course(course)
            print("‚úÖ –ö—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω!")

        elif choice == "2":
            for c in platform.get_courses():
                print("-", c)

        elif choice == "3":
            title = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
            platform.remove_course(title)
            print("üóë –ö—É—Ä—Å —É–¥–∞–ª—ë–Ω (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª).")

        elif choice == "4":
            for c in platform.get_top_courses():
                print(f"{c} ‚Äî —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {len(c.students)}")

        elif choice == "5":
            platform.save_to_file()

        elif choice == "6":
            request = input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ")
            chain = InstructorHandler(MethodologyDepartmentHandler(ManagementHandler()))
            print(chain.handle_request(request))

        elif choice == "7":
            print("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")


# ==========================
# 11. –ó–ê–ü–£–°–ö
# ==========================
if __name__ == "__main__":
    main_menu()
